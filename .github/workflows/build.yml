name: Build Multi-Platform

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: curator-linux-amd64

          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: curator-linux-arm64

          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: curator-linux-amd64-static

          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            name: curator-linux-arm64-static

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: curator-windows-amd64.exe

          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: curator-windows-arm64.exe

          - target: x86_64-apple-darwin
            os: macos-latest
            name: curator-macos-amd64

          - target: aarch64-apple-darwin
            os: macos-latest
            name: curator-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install cross-compilation tools (musl targets)
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Install cross-compilation tools (macOS targets)
        if: contains(matrix.target, 'apple')
        run: |
          echo "macOS targets should compile natively or with existing toolchain"

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true
          # Cross-compilation setup for aarch64 targets
          CC_aarch64_unknown_linux_gnu: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}
          CC_aarch64_unknown_linux_musl: ${{ matrix.target == 'aarch64-unknown-linux-musl' && 'aarch64-linux-gnu-gcc' || '' }}
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: ${{ matrix.target == 'aarch64-unknown-linux-musl' && 'aarch64-linux-gnu-gcc' || '' }}

      - name: Prepare artifact
        shell: bash
        run: |
          echo "Matrix OS: ${{ matrix.os }}"
          echo "Matrix target: ${{ matrix.target }}"
          echo "Matrix name: ${{ matrix.name }}"
          ls -la target/${{ matrix.target }}/release/
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/cu.exe ${{ matrix.name }}
          else
            cp target/${{ matrix.target }}/release/cu ${{ matrix.name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
          retention-days: 7

  package:
    name: Build Linux Packages
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux AMD64 binary
        uses: actions/download-artifact@v4
        with:
          name: curator-linux-amd64
          path: ./artifacts/

      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm ruby ruby-dev rubygems build-essential
          sudo gem install --no-document fpm

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Prepare binary
        run: |
          chmod +x ./artifacts/curator-linux-amd64
          mkdir -p ./package/usr/local/bin
          cp ./artifacts/curator-linux-amd64 ./package/usr/local/bin/curator

      - name: Create .deb package
        run: |
          fpm -s dir -t deb \
            -n curator \
            -v ${{ steps.get_version.outputs.VERSION }} \
            --description "A versatile CLI tool for project management and automation" \
            --url "https://github.com/Saturnyx/curator" \
            --maintainer "Saturnyx <your-email@example.com>" \
            --license "MIT" \
            --architecture amd64 \
            -C ./package \
            usr/local/bin/curator=/usr/local/bin/curator

      - name: Create .rpm package
        run: |
          fpm -s dir -t rpm \
            -n curator \
            -v ${{ steps.get_version.outputs.VERSION }} \
            --description "A versatile CLI tool for project management and automation" \
            --url "https://github.com/Saturnyx/curator" \
            --maintainer "Saturnyx <your-email@example.com>" \
            --license "MIT" \
            --architecture x86_64 \
            -C ./package \
            usr/local/bin/curator=/usr/local/bin/curator

      - name: Upload .deb package
        uses: actions/upload-artifact@v4
        with:
          name: curator-deb-package
          path: "*.deb"
          retention-days: 7

      - name: Upload .rpm package
        uses: actions/upload-artifact@v4
        with:
          name: curator-rpm-package
          path: "*.rpm"
          retention-days: 7

  release:
    name: Create Release
    needs: [build, package]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            curator-linux-amd64/curator-linux-amd64
            curator-linux-arm64/curator-linux-arm64
            curator-linux-amd64-static/curator-linux-amd64-static
            curator-linux-arm64-static/curator-linux-arm64-static
            curator-windows-amd64.exe/curator-windows-amd64.exe
            curator-windows-arm64.exe/curator-windows-arm64.exe
            curator-macos-amd64/curator-macos-amd64
            curator-macos-arm64/curator-macos-arm64
            curator-deb-package/*.deb
            curator-rpm-package/*.rpm
          body: |
            ## Installation Options:
            
            ### Via Package Manager:
            **Debian/Ubuntu (.deb)**:
            ```bash
            wget https://github.com/Saturnyx/curator/releases/download/${{ github.ref_name }}/curator_${{ github.ref_name }}_amd64.deb
            sudo dpkg -i curator_${{ github.ref_name }}_amd64.deb
            ```
            
            **RHEL/CentOS/Fedora (.rpm)**:
            ```bash
            wget https://github.com/Saturnyx/curator/releases/download/${{ github.ref_name }}/curator-${{ github.ref_name }}-1.x86_64.rpm
            sudo rpm -i curator-${{ github.ref_name }}-1.x86_64.rpm
            ```
            
            ### Via Cargo:
            ```bash
            cargo install curator_cli
            ```
            
            ### Manual Installation:
            Download the appropriate binary for your platform and add it to your PATH.
            
            **Linux (x86_64 architecture)**: curator-linux-amd64
            **Linux (ARM64 architecture)**: curator-linux-arm64
            **Linux (x86_64 architecture, static)**: curator-linux-amd64-static
            **Linux (ARM64 architecture, static)**: curator-linux-arm64-static
            **macOS Intel (x86_64 architecture)**: curator-macos-amd64
            **macOS Silicon (ARM64 architecture)**: curator-macos-arm64
            **Windows (x86_64 architecture)**: curator-windows-amd64.exe
            **Windows (ARM64 architecture)**: curator-windows-arm64.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish to crates.io
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Verify project builds
      run: cargo build --release

    - name: Run tests
      run: cargo test

    - name: Check if version is already published
      run: |
        CRATE_VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "curator_cli") | .version')
        echo "Local version: $CRATE_VERSION"
        
        # Check if this version exists on crates.io
        if curl -s "https://crates.io/api/v1/crates/curator_cli/versions" | jq -e ".versions[] | select(.num == \"$CRATE_VERSION\")" > /dev/null; then
          echo "Version $CRATE_VERSION already exists on crates.io"
          echo "SKIP_PUBLISH=true" >> $GITHUB_ENV
        else
          echo "Version $CRATE_VERSION not found on crates.io, proceeding with publish"
          echo "SKIP_PUBLISH=false" >> $GITHUB_ENV
        fi

    - name: Publish to crates.io
      if: env.SKIP_PUBLISH == 'false'
      run: cargo publish --allow-dirty --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
